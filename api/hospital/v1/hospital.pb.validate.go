// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/hospital.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddHospitalSettingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddHospitalSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddHospitalSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddHospitalSettingRequestMultiError, or nil if none found.
func (m *AddHospitalSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddHospitalSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 6 || l > 30 {
		err := AddHospitalSettingRequestValidationError{
			field:  "Name",
			reason: "value length must be between 6 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRegistrationNumber()); l < 18 || l > 22 {
		err := AddHospitalSettingRequestValidationError{
			field:  "RegistrationNumber",
			reason: "value length must be between 18 and 22 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ApiUrl

	// no validation rules for SignatureKey

	if m.ContactPerson != nil {

		if l := utf8.RuneCountInString(m.GetContactPerson()); l < 2 || l > 6 {
			err := AddHospitalSettingRequestValidationError{
				field:  "ContactPerson",
				reason: "value length must be between 2 and 6 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ContactMobile != nil {

		if utf8.RuneCountInString(m.GetContactMobile()) != 11 {
			err := AddHospitalSettingRequestValidationError{
				field:  "ContactMobile",
				reason: "value length must be 11 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

	}

	if m.Locked != nil {

		if _, ok := _AddHospitalSettingRequest_Locked_InLookup[m.GetLocked()]; !ok {
			err := AddHospitalSettingRequestValidationError{
				field:  "Locked",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AddHospitalSettingRequestMultiError(errors)
	}

	return nil
}

// AddHospitalSettingRequestMultiError is an error wrapping multiple validation
// errors returned by AddHospitalSettingRequest.ValidateAll() if the
// designated constraints aren't met.
type AddHospitalSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddHospitalSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddHospitalSettingRequestMultiError) AllErrors() []error { return m }

// AddHospitalSettingRequestValidationError is the validation error returned by
// AddHospitalSettingRequest.Validate if the designated constraints aren't met.
type AddHospitalSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddHospitalSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddHospitalSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddHospitalSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddHospitalSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddHospitalSettingRequestValidationError) ErrorName() string {
	return "AddHospitalSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddHospitalSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddHospitalSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddHospitalSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddHospitalSettingRequestValidationError{}

var _AddHospitalSettingRequest_Locked_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on EditHospitalSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditHospitalSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditHospitalSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditHospitalSettingRequestMultiError, or nil if none found.
func (m *EditHospitalSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditHospitalSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := EditHospitalSettingRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 6 || l > 30 {
			err := EditHospitalSettingRequestValidationError{
				field:  "Name",
				reason: "value length must be between 6 and 30 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.RegistrationNumber != nil {

		if l := utf8.RuneCountInString(m.GetRegistrationNumber()); l < 18 || l > 22 {
			err := EditHospitalSettingRequestValidationError{
				field:  "RegistrationNumber",
				reason: "value length must be between 18 and 22 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ContactPerson != nil {

		if l := utf8.RuneCountInString(m.GetContactPerson()); l < 2 || l > 6 {
			err := EditHospitalSettingRequestValidationError{
				field:  "ContactPerson",
				reason: "value length must be between 2 and 6 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ContactMobile != nil {

		if utf8.RuneCountInString(m.GetContactMobile()) != 11 {
			err := EditHospitalSettingRequestValidationError{
				field:  "ContactMobile",
				reason: "value length must be 11 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

	}

	if m.Locked != nil {

		if _, ok := _EditHospitalSettingRequest_Locked_InLookup[m.GetLocked()]; !ok {
			err := EditHospitalSettingRequestValidationError{
				field:  "Locked",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ApiUrl != nil {
		// no validation rules for ApiUrl
	}

	if m.SignatureKey != nil {
		// no validation rules for SignatureKey
	}

	if len(errors) > 0 {
		return EditHospitalSettingRequestMultiError(errors)
	}

	return nil
}

// EditHospitalSettingRequestMultiError is an error wrapping multiple
// validation errors returned by EditHospitalSettingRequest.ValidateAll() if
// the designated constraints aren't met.
type EditHospitalSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditHospitalSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditHospitalSettingRequestMultiError) AllErrors() []error { return m }

// EditHospitalSettingRequestValidationError is the validation error returned
// by EditHospitalSettingRequest.Validate if the designated constraints aren't met.
type EditHospitalSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditHospitalSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditHospitalSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditHospitalSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditHospitalSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditHospitalSettingRequestValidationError) ErrorName() string {
	return "EditHospitalSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditHospitalSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditHospitalSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditHospitalSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditHospitalSettingRequestValidationError{}

var _EditHospitalSettingRequest_Locked_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on DeleteHospitalSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHospitalSettingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHospitalSettingRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHospitalSettingRequestMultiError, or nil if none found.
func (m *DeleteHospitalSettingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHospitalSettingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteHospitalSettingRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteHospitalSettingRequestMultiError(errors)
	}

	return nil
}

// DeleteHospitalSettingRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteHospitalSettingRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteHospitalSettingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHospitalSettingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHospitalSettingRequestMultiError) AllErrors() []error { return m }

// DeleteHospitalSettingRequestValidationError is the validation error returned
// by DeleteHospitalSettingRequest.Validate if the designated constraints
// aren't met.
type DeleteHospitalSettingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHospitalSettingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHospitalSettingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHospitalSettingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHospitalSettingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHospitalSettingRequestValidationError) ErrorName() string {
	return "DeleteHospitalSettingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHospitalSettingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHospitalSettingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHospitalSettingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHospitalSettingRequestValidationError{}

// Validate checks the field values on DeleteHospitalSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHospitalSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHospitalSettingsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteHospitalSettingsRequestMultiError, or nil if none found.
func (m *DeleteHospitalSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHospitalSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := DeleteHospitalSettingsRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if item <= 0 {
			err := DeleteHospitalSettingsRequestValidationError{
				field:  fmt.Sprintf("Ids[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteHospitalSettingsRequestMultiError(errors)
	}

	return nil
}

// DeleteHospitalSettingsRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteHospitalSettingsRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteHospitalSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHospitalSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHospitalSettingsRequestMultiError) AllErrors() []error { return m }

// DeleteHospitalSettingsRequestValidationError is the validation error
// returned by DeleteHospitalSettingsRequest.Validate if the designated
// constraints aren't met.
type DeleteHospitalSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHospitalSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHospitalSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHospitalSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHospitalSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHospitalSettingsRequestValidationError) ErrorName() string {
	return "DeleteHospitalSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHospitalSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHospitalSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHospitalSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHospitalSettingsRequestValidationError{}

// Validate checks the field values on HospitalSettingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HospitalSettingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HospitalSettingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HospitalSettingReplyMultiError, or nil if none found.
func (m *HospitalSettingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HospitalSettingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HospitalSettingReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HospitalSettingReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HospitalSettingReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HospitalSettingReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HospitalSettingReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HospitalSettingReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for RegistrationNumber

	// no validation rules for ContactPerson

	// no validation rules for ContactMobile

	// no validation rules for Locked

	// no validation rules for ApiUrl

	// no validation rules for SignatureKey

	if len(errors) > 0 {
		return HospitalSettingReplyMultiError(errors)
	}

	return nil
}

// HospitalSettingReplyMultiError is an error wrapping multiple validation
// errors returned by HospitalSettingReply.ValidateAll() if the designated
// constraints aren't met.
type HospitalSettingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HospitalSettingReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HospitalSettingReplyMultiError) AllErrors() []error { return m }

// HospitalSettingReplyValidationError is the validation error returned by
// HospitalSettingReply.Validate if the designated constraints aren't met.
type HospitalSettingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HospitalSettingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HospitalSettingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HospitalSettingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HospitalSettingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HospitalSettingReplyValidationError) ErrorName() string {
	return "HospitalSettingReplyValidationError"
}

// Error satisfies the builtin error interface
func (e HospitalSettingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHospitalSettingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HospitalSettingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HospitalSettingReplyValidationError{}

// Validate checks the field values on CommonAddReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonAddReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonAddReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonAddReplyMultiError,
// or nil if none found.
func (m *CommonAddReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonAddReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonAddReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonAddReplyValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonAddReplyValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonAddReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonAddReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonAddReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommonAddReplyMultiError(errors)
	}

	return nil
}

// CommonAddReplyMultiError is an error wrapping multiple validation errors
// returned by CommonAddReply.ValidateAll() if the designated constraints
// aren't met.
type CommonAddReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonAddReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonAddReplyMultiError) AllErrors() []error { return m }

// CommonAddReplyValidationError is the validation error returned by
// CommonAddReply.Validate if the designated constraints aren't met.
type CommonAddReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonAddReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonAddReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonAddReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonAddReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonAddReplyValidationError) ErrorName() string { return "CommonAddReplyValidationError" }

// Error satisfies the builtin error interface
func (e CommonAddReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonAddReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonAddReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonAddReplyValidationError{}

// Validate checks the field values on CommonEditReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommonEditReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonEditReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonEditReplyMultiError, or nil if none found.
func (m *CommonEditReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonEditReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonEditReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonEditReplyValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonEditReplyValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommonEditReplyMultiError(errors)
	}

	return nil
}

// CommonEditReplyMultiError is an error wrapping multiple validation errors
// returned by CommonEditReply.ValidateAll() if the designated constraints
// aren't met.
type CommonEditReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonEditReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonEditReplyMultiError) AllErrors() []error { return m }

// CommonEditReplyValidationError is the validation error returned by
// CommonEditReply.Validate if the designated constraints aren't met.
type CommonEditReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonEditReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonEditReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonEditReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonEditReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonEditReplyValidationError) ErrorName() string { return "CommonEditReplyValidationError" }

// Error satisfies the builtin error interface
func (e CommonEditReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonEditReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonEditReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonEditReplyValidationError{}
