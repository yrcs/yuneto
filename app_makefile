# GOPATH:=$(shell go env GOPATH)
# KRATOS_VERSION=$(shell go mod graph |grep go-kratos/kratos/v2 |head -n 1 |awk -F '@' '{print $$2}')
# KRATOS=$(GOPATH)/pkg/mod/github.com/go-kratos/kratos/v2@$(KRATOS_VERSION)
VERSION = $(shell git describe --tags --always)
APP_RELATIVE_PATH = $(shell a=`basename $$PWD` && cd ../.. && b=`basename $$PWD` && echo $$b/$$a)
APP_BASENAME = $(shell basename $(APP_RELATIVE_PATH))
INTERNAL_PROTO_FILES = $(shell find internal -name *.proto)
API_PROTO_FILES = $(shell cd ../../api/$(APP_BASENAME) && find . -name *.proto)
APP_NAME = $(shell echo $(APP_RELATIVE_PATH) | sed -E "s|\/|-|g")
CONTAINER_IMAGE = $(shell echo $(APP_NAME) |awk -F '@' '{print "yrcs/" $$0 ":0.1.0"}')

.PHONY: init
# init env
init:
	go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
	go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
	go install github.com/go-kratos/kratos/cmd/kratos/v2@latest
	go install github.com/go-kratos/kratos/cmd/protoc-gen-go-errors/v2
	go install github.com/envoyproxy/protoc-gen-validate@latest
	go install github.com/go-kratos/kratos/cmd/protoc-gen-go-http/v2@latest
	go install github.com/swaggo/swag/cmd/swag

.PHONY: config
# generate internal conf.pb.go
config:
	protoc --proto_path=. \
	--proto_path=../../third_party \
	--go_out=paths=source_relative:. \
	$(INTERNAL_PROTO_FILES)

.PHONY: page
# generate pagination.pb.go
page:
	protoc --proto_path=../../third_party \
	--go_out=paths=source_relative:../../third_party \
	--validate_out=paths=source_relative,lang=go:../../third_party \
	../../third_party/third_party/pagination/pagination.proto

.PHONY: api
# generate api *.pb.go and docs
api:
	cd ../../api/$(APP_BASENAME) && protoc --proto_path=. \
	--proto_path=../../third_party \
	--go_out=paths=source_relative:. \
	--go-errors_out=paths=source_relative:. \
	--validate_out=paths=source_relative,lang=go:. \
	--go-grpc_out=paths=source_relative:. \
	--go-http_out=paths=source_relative:. \
	$(API_PROTO_FILES)
	swag fmt -d internal/server,../../api/$(APP_BASENAME)/v1 -g http.go
	swag init -d internal/server,../../api/$(APP_BASENAME)/v1 --pd -g http.go -o ../../api/$(APP_BASENAME)/v1/docs

.PHONY: wire
# wire
wire:
	go mod tidy
	go install github.com/google/wire/cmd/wire@latest
	cd cmd/$(APP_BASENAME) && pwd && wire

.PHONY: test
# test
test:
	go test -v ./... -cover

.PHONY: build
# build
build:
	mkdir -p bin/ && go build -ldflags "-X main.Name=$(APP_NAME) -X main.Version=$(VERSION)" -o ./bin/ ./...
	@echo 'Project app/$(APP_BASENAME) has been successfully built.'
	@echo 'Use the following commands to start the project:'
	@echo '$$ cd app/$(APP_BASENAME)'
	@echo '$$ ./bin/$(APP_BASENAME) -conf ./configs'

.PHONY: all
# generate all pb.go, wire, test and build
all: config api wire test build

.PHONY: container
# build container image
container:
	cd ../.. && podman build -f deploy/build/Dockerfile --build-arg APP_BASENAME=$(APP_BASENAME) --rm -t $(CONTAINER_IMAGE) .

.PHONY: help
# show help
help:
	@echo ''
	@echo 'Usage:'
	@echo ' make [target]'
	@echo ''
	@echo 'Targets:'
	@awk '/^[a-zA-Z\-\_0-9]+:/ { \
	helpMessage = match(lastLine, /^# (.*)/); \
		if (helpMessage) { \
			helpCommand = substr($$1, 0, index($$1, ":")-1); \
			helpMessage = substr(lastLine, RSTART + 2, RLENGTH); \
			printf "\033[36m%-22s\033[0m %s\n", helpCommand,helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)

.DEFAULT_GOAL := help